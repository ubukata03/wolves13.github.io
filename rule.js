
//Rulesetをここで定める
function Rules(){
	//1part   

	setConfirmation(18,0);
	FirstCF(900,0);
	PCFrule(3,3,0);
	PCFrule(3,2,0);
	PCFrule(2,3,0);
	PCFrule(2,2,0);
	PCFrule(5,4,0);
	PCFrule(6,2,0);
	PCFrule(7,3,0);
	
	ICFrule(3,19,0);
	ICFrule(4,13,0);
	ICFrule(9,12,0);
	ICFrule(9,13,0);
	ICFrule(10,12,0);
	ICFrule(2,18,0);
	ICFrule(1,18,0);
	ICFrule(7,13,0);
	ICFrule(2,13,0);
	ICFrule(3,12,0);
	ICFrule(3,13,0);
	ICFrule(12,12,0);
	ICFrule(5,16,0);
	ICFrule(5,17,0);
	ICFrule(12,16,0);
	ICFrule(6,18,0);
	ICFrule(7,17,0);
	ICFrule(12,7,0);
	ICFrule(7,16,0);
	
	CFrule(1,6,0);
	CFrule(12,7,0);
	CFrule(12,7,0);
	CFrule(10,4,0);
	CFrule(12,8,0);
	CFrule(5,8,0);
	CFrule(5,9,0);
	CFrule(3,12,0);
	CFrule(7,1,0);
	CFrule(7,3,0);
	CFrule(1,8,0);
	CFrule(11,5,0);
	CFrule(15,10,0);
	CFrule(15,11,0);
	CFrule(14,11,0);
	CFrule(13,18,0);
	CFrule(14,18,0);
	CFrule(14,17,0);
	CFrule(14,16,0);
	ICFrule(15,7,0);
	ICFrule(18,6,0);
	ICFrule(16,6,0);
	ICFrule(15,6,0);
	//
	setConfirmation(18,1);
	PCFrule(2,2,1);
	PCFrule(3,3,1);
	PCFrule(3,2,1);
	PCFrule(2,3,1);
	
	for(var i=1;i<6;i++){
		CFrule((i+1)*3,3*i-2,1);
		CFrule((i+1)*3-1,3*i-1,1);
	}
	CFrule(3,5,1);
	CFrule(1,5,1);
	CFrule(6,8,1);
	CFrule(16,14,1);
	CFrule(18,14,1);
	ICFrule(4,13,1);
	ICFrule(9,13,1);
	ICFrule(9,12,1);
	ICFrule(15,7,1);
	ICFrule(16,6,1);
	ICFrule(10,7,1);
	ICFrule(1,18,1);
	ICFrule(3,18,1);
	ICFrule(6,13,1);
	ICFrule(7,12,1);
	ICFrule(12,7,1);
	ICFrule(13,7,1);
	ICFrule(18,6,1);
	
	//left_turn(up to up)
	setConfirmation(18,3);
	PCFrule(3,3,3);
	PCFrule(3,2,3);
	PCFrule(2,1,3);
	CFrule(1,6,3);
	CFrule(5,1,3);
	CFrule(2,5,3);
	CFrule(9,4,3);
	CFrule(8,5,3);
	CFrule(8,6,3);
	CFrule(10,4,3);
	CFrule(11,3,3);
	CFrule(12,10,3);
	CFrule(13,11,3);
	CFrule(14,12,3);
	CFrule(15,13,3);
	CFrule(17,15,3);
	CFrule(18,11,3);
	CFrule(18,13,3);
	
	//2nd_line
	setConfirmation(18,4);
	PCFrule(2,2,4);
	PCFrule(3,3,4);
	for(var i=1;i<6;i++){
		CFrule((i+1)*3,3*i-2,4);
		CFrule((i+1)*3-1,3*i-1,4);
	}
	//
	setConfirmation(18,5);
	PCFrule(2,3,5);
	PCFrule(3,3,5);
	ICFrule(8,4,5);
	ICFrule(8,6,5);
	ICFrule(8,7,5);
	ICFrule(9,1,5);
	ICFrule(9,3,5);
	ICFrule(9,4,5);
	ICFrule(9,6,5);
	ICFrule(18,1,5);
	ICFrule(18,0,5);
	ICFrule(18,-2,5);
	for(var i=1;i<6;i++){
		CFrule((i+1)*3,3*i-2,5);
	}
	CFrule(2,5,5);
	CFrule(3,5,5);
	CFrule(8,4,5);
	CFrule(8,11,5);
	CFrule(11,14,5);
	CFrule(12,5,5);
	CFrule(15,17,5);
	CFrule(18,9,5);
	//left turn(up to low)
	setConfirmation(22,6);
	PCFrule(2,2,6);
	PCFrule(3,3,6);
	for(var i=1;i<3;i++){
		CFrule((i+1)*3,3*i-2,6);
		CFrule((i+1)*3-1,3*i-1,6);
	}
	CFrule(10,8,6);
	CFrule(11,9,6);
	CFrule(12,9,6);
	CFrule(13,11,6);
	CFrule(14,12,6);
	CFrule(15,13,6);
	CFrule(16,14,6);
	CFrule(18,14,6);
	CFrule(19,4,6);
	CFrule(19,12,6);
	CFrule(20,4,6);
	CFrule(21,18,6);
	CFrule(22,17,6);
	
	//copy
	setConfirmation(18,7);
	PCFrule(2,3,7);
	PCFrule(3,3,7);
	ICFrule(4,16,7);
	ICFrule(5,10,7);
	ICFrule(6,9,7);
	ICFrule(6,10,7);
	ICFrule(10,14,7);
	ICFrule(15,9,7);
	ICFrule(15,13,7);
	CFrule(1,10,7);
	CFrule(1,6,7);
	CFrule(4,8,7);
	CFrule(4,9,7);
	CFrule(12,7,7);
	CFrule(15,17,7);
	CFrule(18,13,7);
	
	//copy_space
	setConfirmation(18,8);
	PCFrule(2,3,8);
	PCFrule(3,3,8);
	for(var i=1;i<6;i++){
		CFrule((i+1)*3,3*i-2,8);
	}
	for(var i=1;i<3;i++){
		CFrule(i*6+2,6*(i-1)+4,8);
		CFrule(i*6-1,6*(i-1)+3,8);
	}
	CFrule(17,15,8);
	//left_turn(low tp up)
	setConfirmation(16,9);
	PCFrule(2,3,9);
	PCFrule(3,3,9);
	CFrule(6,1,9);
	CFrule(5,3,9);
	CFrule(7,5,9);
	CFrule(8,6,9);
	CFrule(9,6,9);
	CFrule(10,8,9);
	CFrule(11,9,9);
	CFrule(12,10,9);
	CFrule(13,11,9);
	CFrule(15,13,9);
	CFrule(16,9,9);
	CFrule(16,11,9);
	//copy_2nd
	setConfirmation(18,10);
	PCFrule(2,2,10);
	PCFrule(3,3,10);
	ICFrule(8,6,10);
	ICFrule(8,7,10);
	ICFrule(9,1,10);
	ICFrule(9,6,10);
	ICFrule(18,1,10);
	for(var i=1;i<6;i++){
		CFrule((i+1)*3,3*i-2,10);
		CFrule((i+1)*3-1,3*i-1,10);
	}
	CFrule(12,5,10);
	CFrule(17,9,10);
	CFrule(17,10,10);
	CFrule(18,9,10);
	CFrule(18,10,10);
	CFrule(18,14,10);
	
	//right_turn(square to glider)
	setConfirmation(48,11);
	PCFrule(2,2,11);
	PCFrule(3,3,11);
	for(var i=1;i<7;i++){
		CFrule((i+1)*3,3*i-2,11);
	}
	for(var i=1;i<4;i++){
		CFrule(i*6,6*i-4,11);
		CFrule(i*6+2,6*i-2,11);
		CFrule(i*6-1,6*i-3,11);
	}
	CFrule(22,20,11);
	CFrule(23,21,11);
	CFrule(24,21,11);
	CFrule(25,23,11);
	CFrule(26,24,11);
	CFrule(27,25,11);
	CFrule(28,26,11);
	CFrule(29,26,11);
	CFrule(30,24,11);
	CFrule(31,29,11);
	CFrule(33,30,11);
	CFrule(32,30,11);
	for(var i=1;i<6;i++){
		CFrule((i+1)*3+30,3*i-2+30,11);
		CFrule((i+1)*3-1,3*i-1,10);
	}
	
	//automaton_1st
	setConfirmation(24,12);
	PCFrule(3,2,12);
	PCFrule(3,3,12);
	PCFrule(6,2,12);
	PCFrule(7,2,12);
	PCFrule(7,3,12);
	ICFrule(3,16,12);
	ICFrule(4,15,12);
	ICFrule(4,16,12);
	ICFrule(5,20,12);
	ICFrule(6,19,12);
	ICFrule(6,20,12);
	ICFrule(7,20,12);
	ICFrule(12,16,12);
	ICFrule(12,20,12);
	ICFrule(13,19,12);
	ICFrule(7,10,12);
	ICFrule(13,10,12);
	ICFrule(15,4,12);
	ICFrule(24,4,12);
	for(var i=1;i<8;i++){
		CFrule((i+1)*3,3*i-2,12);
		CFrule((i+1)*3-1,3*i-1,12);
	}
	CFrule(1,9,12);
	CFrule(2,6,12);
	CFrule(3,12,12);
	CFrule(4,8,12);
	CFrule(4,10,12);
	CFrule(4,12,12);
	CFrule(6,12,12);
	CFrule(7,10,12);
	CFrule(8,12,12);
	CFrule(11,14,12);
	CFrule(11,19,12);
	CFrule(15,24,12);
	CFrule(16,24,12);
	
	//Automaton_Spacer
	setConfirmation(12,13);
	PCFrule(2,2,13);
	PCFrule(3,3,13);
	for(var i=1;i<4;i++){
		CFrule((i+1)*3,3*i-2,13);
		CFrule((i+1)*3-1,3*i-1,13);
	}
	CFrule(12,8,13);
	
	//left_turn(glider)
	setConfirmation(22,14);
	PCFrule(2,2,14);
	PCFrule(3,3,14);
	for(var i=1;i<3;i++){
		CFrule((i+1)*3,3*i-2,14);
		CFrule((i+1)*3-1,3*i-1,14);
	}
	CFrule(10,8,14);
	CFrule(12,10,14);
	CFrule(12,9,14);
	CFrule(11,13,14);
	CFrule(15,9,14);
	CFrule(15,4,14);
	CFrule(16,4,14);
	CFrule(17,14,14);
	CFrule(18,16,14);
	CFrule(19,17,14);
	CFrule(22,16,14);
	
	//Automaton_copy
	setConfirmation(24,15);
	PCFrule(3,3,15);
	PCFrule(7,3,15);
	for(var i=1;i<7;i++){
		CFrule((i+1)*3,3*i-2,15);
	}
	CFrule(2,5,15);
	CFrule(10,19,15);
	CFrule(14,17,15);
	ICFrule(2,20,15);
	ICFrule(3,20,15);
	ICFrule(12,11,15);
	ICFrule(12,13,15);
	ICFrule(12,15,15);
	ICFrule(12,19,15);
	ICFrule(14,7,15);
	ICFrule(14,8,15);
	ICFrule(15,6,15);
	ICFrule(15,8,15);
	ICFrule(24,1,15);
	ICFrule(24,3,15);
	ICFrule(24,7,15);
	
	//right_turn(glider)
	setConfirmation(23,16);
	PCFrule(3,3,16);
	CFrule(4,2,16);
	CFrule(5,3,16);
	CFrule(6,4,16);
	CFrule(7,5,16);
	CFrule(8,5,16);
	CFrule(9,3,16);
	CFrule(10,8,16);
	CFrule(11,8,16);
	PCFrule(14,3,16);
	CFrule(17,12,16);
	CFrule(20,15,16);
	CFrule(23,19,16);
	CFrule(23,18,16);
	
	////
	//Automaton_2nd
	setConfirmation(26,17);
	PCFrule(3,3,17);
	PCFrule(3,2,17);
	for(var i=1;i<4;i++){
		CFrule((i+1)*3,3*i-2,17);
	}
	PCFrule(7,2,17);
	PCFrule(8,3,17);
	ICFrule(2,20,17);//
	ICFrule(3,19,17);//
	ICFrule(3,20,17);//
	ICFrule(3,22,17);//
	ICFrule(4,10,17);//
	ICFrule(4,19,17);//
	ICFrule(5,15,17);//
	ICFrule(5,16,17);//
	ICFrule(6,10,17);//
	ICFrule(6,15,17);//
	ICFrule(6,21,17);//
	ICFrule(7,16,17);//
	ICFrule(8,15,17);//
	ICFrule(9,20,17);//
	ICFrule(9,19,17);//
	//ICFrule(10,19,17);
	ICFrule(13,10,17);///
	ICFrule(15,9,17);//
	ICFrule(15,10,17);//
	ICFrule(16,8,17);//
	ICFrule(17,7,17);//
	ICFrule(17,8,17);//
	ICFrule(20,3,17);///
	ICFrule(21,4,17);//
	ICFrule(21,3,17);//
	ICFrule(24,7,17);//
	ICFrule(24,-2,17);///
	CFrule(1,7,17);//
	CFrule(1,10,17);//
	CFrule(2,5,17);//
	CFrule(2,9,17);//
	CFrule(3,6,17);//
	CFrule(4,11,17);//
	CFrule(4,13,17);///
	CFrule(5,8,17);//
	CFrule(5,10,17);//
	CFrule(5,11,17);//
	//CFrule(5,13,17);
	CFrule(6,9,17);//
	CFrule(6,10,17);//
	CFrule(6,14,17);///
	CFrule(6,15,17);//
	CFrule(7,10,17);//
	CFrule(8,11,17);//
	//CFrule(8,15,17);
	CFrule(9,12,17);//
	CFrule(9,14,17);///
	CFrule(11,15,17);///
	CFrule(12,15,17);///
	//CFrule(12,18,17);
	CFrule(13,18,17);//
	CFrule(14,17,17);//
	CFrule(14,18,17);//
	CFrule(14,19,17);//
	CFrule(14,20,17);//
	CFrule(16,19,17);//
	CFrule(16,23,17);//
	CFrule(17,19,17);//
	CFrule(17,20,17);//
	CFrule(17,22,17);///
	CFrule(18,21,17);//
	CFrule(19,22,17);///
	CFrule(19,24,17);//
	CFrule(21,24,17);//
	CFrule(26,18,17);//
	//to low part
	setConfirmation(12,18);
	PCFrule(3,3,18);
	PCFrule(3,2,18);
	PCFrule(2,2,18);
	for(var i=1;i<4;i++){
		CFrule((i+1)*3,3*i-2,18);
	}
	ICFrule(5,4,18);
	ICFrule(6,9,18);
	ICFrule(7,3,18);
	ICFrule(12,3,18);
	
	CFrule(1,8,18);
	CFrule(2,7,18);
	CFrule(4,7,18);
	CFrule(5,12,18);
	CFrule(6,9,18);
	
	//
	//length:3のspace
	setConfirmation(9,19);
	PCFrule(3,3,19);
	PCFrule(2,2,19);
	for(var i=1;i<3;i++){
		CFrule((i+1)*3,3*i-2,19);
		CFrule((i+1)*3-1,3*i-1,19);
	}
	CFrule(9,5,19);
	
	////
	//4con
	setConfirmation(24,20);
	PCFrule(3,3,20);
	PCFrule(3,2,20);
	for(var i=1;i<8;i++){
		CFrule((i+1)*3,3*i-2,20);
	}
	
	ICFrule(3,27,20);
	
	ICFrule(5,16,20);
	ICFrule(5,23,20);
	ICFrule(9,19,20);
	ICFrule(12,16,20);
	ICFrule(12,18,20);
	ICFrule(14,7,20);
	ICFrule(15,6,20);
	ICFrule(15,7,20);
	ICFrule(15,9,20);
	ICFrule(15,10,20);
	ICFrule(15,13,20);
	ICFrule(16,9,20);
	ICFrule(17,4,20);
	ICFrule(17,11,20);
	ICFrule(18,1,20);
	ICFrule(18,3,20);
	ICFrule(18,10,20);
	ICFrule(18,12,20);
	ICFrule(24,4,20);
	ICFrule(24,10,20);
	ICFrule(24,6,20);
	ICFrule(24,8,20);
	ICFrule(24,9,20);
	
	CFrule(1,8,20);
	CFrule(2,5,20);
	CFrule(2,6,20);
	CFrule(2,7,20);
	CFrule(4,7,20);
	CFrule(5,7,20);
	CFrule(5,8,20);
	CFrule(6,9,20);
	CFrule(6,12,20);
	CFrule(8,12,20);
	
	CFrule(13,22,20);
	CFrule(14,17,20);
	CFrule(15,11,20);
	CFrule(15,24,20);
	CFrule(17,20,20);
	CFrule(18,11,20);
	CFrule(19,11,20);
	
	////
	//4con用glider
	setConfirmation(12,21);
	PCFrule(3,3,21);
	PCFrule(3,2,21);
	PCFrule(3,6,21);
	PCFrule(3,7,21);
	for(var i=1;i<4;i++){
		CFrule((i+1)*3,3*i-2,21);
	}
	ICFrule(3,10,21);
	ICFrule(3,12,21);
	
	//length:2のspace
	setConfirmation(6,22);
	PCFrule(3,3,22);
	PCFrule(3,2,22);
	PCFrule(3,6,22);
	PCFrule(3,7,22);
	for(var i=1;i<2;i++){
		CFrule((i+1)*3,3*i-2,22);
	}
	ICFrule(3,12,22);
	CFrule(2,6,22);
	
	////
	//Automaton2ndのspace
	setConfirmation(12,23);
	PCFrule(3,3,23);
	for(var i=1;i<4;i++){
		CFrule((i+1)*3,3*i-2,23);
		CFrule((i+1)*3-1,3*i-1,23);
	}
	ICFrule(3,10,23);
	CFrule(12,8,23);
	
	////
	//tau
	setConfirmation(12,24);
	PCFrule(3,3,24);
	for(var i=1;i<3;i++){
		CFrule((i+1)*3,3*i-2,24);
		CFrule((i+1)*3-1,3*i-1,24);
	}
	ICFrule(2,4,24);
	ICFrule(3,4,24);
	PCFrule(6,2,24);
	PCFrule(7,3,24);
	ICFrule(12,3,24);
	ICFrule(12,1,24);
	////
	//last copy
	setConfirmation(12,25);
	PCFrule(3,3,25);
	for(var i=1;i<3;i++){
		CFrule((i+1)*3,3*i-2,25);
		CFrule((i+1)*3-1,3*i-1,25);
	}
	ICFrule(2,8,25);
	ICFrule(3,8,25);
	ICFrule(2,6,25);
	ICFrule(3,6,25);
	PCFrule(6,2,25);
	PCFrule(7,3,25);
	ICFrule(12,7,25);
	ICFrule(12,3,25);
	ICFrule(12,1,25);
	
	/////////////////////////
	CopyCF(0,2);//2はfirst=false
	SetColor('blue',0);
	SetColor('blue',2);
	SetColor('blue',5);
	SetColor('purple',7);
	SetColor('purple',10);
	SetColor('green',12);
	SetColor('green',15);
	SetColor('green',17);
	SetColor('green',20);
	SetColor('red',18);
	SetColor('red',24);
	SetColor('purple',25);
	SetCFR(0,500,0);
	SetCFR(18,400,1);
	SetCFR(36,500,2);
	SetCFR(54,400,1);
	SetCFR(72,500,2);
	SetCFR(90,400,1);
	SetCFR(108,500,3);//left_turn
	SetCFR(126,0,4);
	SetCFR(144,72,5);
	SetCFR(162,0,4);
	SetCFR(180,36,5);
	SetCFR(198,0,4);
	SetCFR(216,0,5);
	SetCFR(234,0,6);//right_turn
	SetCFR(256,216,7);
	SetCFR(274,0,8);
	SetCFR(292,180,7);
	SetCFR(310,0,8);
	SetCFR(328,144,7);
	SetCFR(346,0,8);
	SetCFR(364,0,9);//left_turn2
	SetCFR(380,0,4);
	SetCFR(398,328,10);
	SetCFR(416,0,4);
	SetCFR(434,292,10);
	SetCFR(452,0,4);
	SetCFR(470,256,10);
	SetCFR(488,0,11);//right_turn2
	SetCFR(536,464,12);
	SetCFR(560,0,13);//length:4のglider
	SetCFR(572,428,12);
	SetCFR(596,0,13);
	SetCFR(608,392,12);
	SetCFR(632,0,13);
	SetCFR(644,0,13);
	SetCFR(656,0,14);//left_turn3
	SetCFR(678,0,13);
	SetCFR(690,0,13);
	SetCFR(702,608,15);
	SetCFR(726,0,13);
	SetCFR(738,572,15);
	SetCFR(762,0,13);
	SetCFR(774,536,15);
	SetCFR(798,0,13);
	SetCFR(810,0,16);//right_turn3(23個)
	SetCFR(833,774,17);
	SetCFR(857,762,23);
	SetCFR(869,738,17);
	SetCFR(893,726,23);
	SetCFR(905,702,17);
	SetCFR(929,690,23);
	SetCFR(941,678,18);//low_to_up
	SetCFR(953,0,14);//left_turn
	SetCFR(975,0,13);
	SetCFR(987,0,19);//length:3のglider
	SetCFR(996,905,20);
	SetCFR(1020,893,21);//glider
	SetCFR(1032,869,20);
	SetCFR(1056,857,21);
	SetCFR(1068,833,20);
	SetCFR(1092,821,22);
	SetCFR(1098,818,18);//tau
	SetCFR(1110,0,13);
	SetCFR(1122,0,14);
	SetCFR(1144,0,13);
	SetCFR(1156,1098,24);
	SetCFR(1168,0,22);
	SetCFR(1174,1080,25);
	SetCFR(1186,0,13);
	SetCFR(1198,0,13);
	SetCFR(1210,1044,25);
	SetCFR(1222,0,13);
	SetCFR(1234,0,13);
	SetCFR(1246,1008,25);
	SetCFR(1258,0,13);
	SetCFR(1270,0,14);
    //////////////////////////////////////////////
   	//Completion
   	
   	OSVars.ruleset[234][900]=true;
    complement(OSVars.cons.beadTypeNum);
   	//////////////////////////////////////////////
   	
};

